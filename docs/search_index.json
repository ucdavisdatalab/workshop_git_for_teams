[["index.html", "Reproducible Research for Teams with GitHub Overview", " Reproducible Research for Teams with GitHub Dr. Tyler Shoemaker 2021-03-22 Overview GitHub is an online platform for software development using Git for version control. During this hands-on workshop we’ll practice setting up, sharing, and collaboratively working on a repository for a research project. We’ll explore different features for improving your workflows, whether you’re working by yourself or with others on a data-driven project using GitHub. "],["preliminaries.html", "1 Preliminaries 1.1 Interactive Session Information 1.2 About this Tutorial 1.3 Objectives for this Workshop 1.4 Prerequisites", " 1 Preliminaries This workshop covers the basics of using Git in tandem with GitHub. It is a hybrid workshop. First, independently work through this online tutorial at your own pace and ensure that you have set up GitHub account. Next, join us for the live interactive session (details below), during which we will learn how to use GitHub to sync local and remote repositories, manage code, and work in parallel with teams. If you need help troubleshooting your installation, drop-in to DataLab’s virtual office hours prior to the interactive session to ensure that you will be able to follow along on your own machine. The full workshop description can be found here. 1.1 Interactive Session Information The workshop includes a live, interactive session to be held via Zoom on Friday, May 28, 2021 from 10:00am to 12:00pm. Zoom login information will be sent to all registered participants via email; reach out to datalab-training@ucdavis.edu the day prior if you received a registration confirmation but have not received your Zoom link. 1.2 About this Tutorial This online tutorial provides background information that will help participants to better understand the concepts introduced during the interactive session. It also includes information to help you successfully set up a GitHub account, which must be completed prior to the interactive session. 1.3 Objectives for this Workshop By the end of this workshop, learners will be able to: Push local changes to a repository on GitHub Create a local copy of an existing repository from GitHub Open and merge a pull request Create a branch to manage work in parallel Add issues and manage notifications for a GitHub repository Identify where to go to learn more 1.4 Prerequisites Familiarity with Command Line and Git version control software is required. Participants should be proficient in navigating their machine and executing basic Git commands using a shell scripting program (Terminal, Bash, etc.). Before attending this workshop, learners should be able to create, modify and navigate to a directory, place a directory under version control, and make, stage and commit changes using Command Line. Need to brush up? Preparatory workshops include DataLab’s Introduction to Command Line and Introduction to Git for Version Control (winter 2021: see materials at https://datalab.ucdavis.edu/archive/). "],["setting-up-a-github-account.html", "2 Setting up a GitHub Account 2.1 About GitHub 2.2 Basic GitHub Account Setup 2.3 GitHub Desktop, or the Command Line? 2.4 Locally Setting Up Your Account Credentials", " 2 Setting up a GitHub Account 2.1 About GitHub GitHub is a repository hosting service. [MORE] 2.2 Basic GitHub Account Setup To use GitHub, you need to make a (free) account. You can do so by going to github.com. Once you’re there, click “Sign Up” in the top-right corner of the page. This should take you to a form, which asks you to enter a username, email address, and password. After you’ve entered in this information (and completed a quick CAPTCHA), GitHub will make you an account. Then, the site will prompt you to complete an optional survey. Fill it out, or scroll to the bottom to skip it. Either way, you’ll need to then verify your email address. Go to your inbox and look for an email from GitHub. Click the “Verify email address” button. Doing so will take you to your homepage, where, if you’d like, you can add a few details about yourself. You now have a GitHub account! 2.3 GitHub Desktop, or the Command Line? Remember that Git is separate from GitHub. The latter is a service that’s been built around the former. One part of the services that GitHub offers is an application called GitHub Desktop, which allows users to manage their repositories with a point-and-click graphical user interface (or GUI). Ultimately, it’s a matter of preference whether you use the GUI or stick with the command line for your own projects (and often, you might end up using a little of both), but for this workshop, we will interact with GitHub via the command line. One of the primary reasons for this has to do with the fact that not every computer you interact with will have GitHub’s GUI installed—or even have a screen! Many remote servers offer command line-only access, and if you ever want to sync your files on these machines, you’ll need to do so without GitHub Desktop. Luckily, GitHub seamlessly extends Git commands, so using the service without the GUI is, as we’ll see, quite straightforward. 2.4 Locally Setting Up Your Account Credentials Regardless of how you make your commits, you will need to use the command line to do one bit of setup. In either Terminal (Mac) or Git Bash (Windows), enter the following commands to associate your name and email with the commits you make (note: you do not need to use your GitHub username): git config --global user.name &quot;&lt;your name&gt;&quot; git config --global user.email &quot;&lt;your email&gt;&quot; You can check whether this was successful by simply calling either, or both, of the following: git config --global user.name git config --global user.email These two commands should echo back the information you’ve just entered. "],["ssh-keys-and-github.html", "3 SSH Keys and GitHub 3.1 SSH Keys: A Short Primer 3.2 Connecting to GitHub with SSH", " 3 SSH Keys and GitHub When you work with remote repositories on GitHub, you’ll often need to enter your username/password to identify yourself. This is for two reasons: 1) it allows GitHub to track who has made changes to what files; 2) it adds a layer of security to projects, letting teams control who can make changes to their files. Remember too that repositories can be public or private; this layer of security also lets teams control who has access to files in the first place. 3.1 SSH Keys: A Short Primer It can be a pain, though, to have to enter and re-enter your credentials when making changes. More, passwords can be lost or worse, stolen. To avoid these problems, we can set up an SSH key. SSH keys (short for “Secure Shell”) are special, machine-readable credentials that allow users to safely connect and authenticate with remote servers over unsecure networks. Their encryption protocols offer stronger protection than even the most complex passwords and they come with the added benefit of freeing users from the need to remember a password. SSH keys have two parts: A public key, which encrypts messages intended for a particular recipient. This can be stored on remote servers, or even shared with others, to facilitate secure data transfers A private key, which deciphers messages encrypted by the public key. Your private key is the only thing capable of unlocking what is sent with your public key. It stays on your computer and should never be shared with anyone Beyond what security measures an SSH key brings, it also acts as your digital signature. GitHub uses this internally to verify that you are, in fact, who you say you are when you commit code to a repository. 3.2 Connecting to GitHub with SSH GitHub offers thorough, straightforward documentation for setting up an SSH key with its services, which we won’t repeat here. Instead, please visit the link below and follow the instructions there to get yourself set up. During the interactive session of this workshop, we will go through these steps together. Connecting to GitHub with SSH "],["pushing-a-repository.html", "4 Pushing a Repository 4.1 Making a Test Repository 4.2 Preparing to Sync Your Repository 4.3 Pushing a Local Repository 4.4 Tracking Files Remotely", " 4 Pushing a Repository Now that you’re able to use SSH keys with GitHub, it’s time to sync the website with a local repository on your computer. 4.1 Making a Test Repository First, use the command line to make a new directory in your Home folder: mkdir ~/my_first_remote_directory Put this directory under version control with Git: cd ~/my_first_remote_directory git init With vim, make a README markdown file: vim README.md Write and save “Hello world!” in the file. You should see something like the following: Exit vim. Then, add README.md to Git and commit your changes. Don’t forget to write a short note in the commit message. git add README.md git commit -m &#39;Add a README file&#39; You should see the following: 4.2 Preparing to Sync Your Repository So far so good! All we’ve done is repeat the normal workflow for putting files under version control. But now we need to step away from the command line for a moment and prepare a space for receiving this repository on GitHub. To do so, go to github.com and, on your homepage, click the “Create repository” button. You’ll be taken to this page: There are a few things of note here: Repository name: Description: Public/private setting: Initialize with details, including: A README file A .gitignore file A license Because we’re initializing this repository from an existing directory, we won’t bother with the extra details. But we do need a title, which should be the same as what’s on your local computer (“my_first_remote_directory”). A description is helpful but not necessary for our purposes. Finally, we will choose to make this a public repository (meaning anyone can see it). 4.3 Pushing a Local Repository Once you’ve entered the above information, click “Create repository.” GitHub will take you to a new screen, which gives you a number of options for making or uploading new files to the repository. Since we already have a repository made, we’ll choose “Push an existing repository from the command line.” Pushing our repository is as easy as sequentially entering into the command line the three commands GitHub provides. git remote add origin git@github.com:&lt;your user account&gt;/my_first_remote_directory.git git branch -M main git push -u origin On the command line, that looks like this: [NOTE A FEW THINGS WE’VE DONE IN THE ABOVE] The GitHub site won’t immediately refresh itself once you’ve entered the above commands, but if you click on the “&lt; &gt; Code” tab or on the name of the directory, you’ll see that the repository has been synced and your README.md file is now online. 4.4 Tracking Files Remotely With this repository made, GitHub can start tracking changes you make to your files, much as Git does locally. The process works exactly like the one you do for Git, though it requires one more step. First, we’ll alter our README.md. Reopen the file with vim, skip a line down from the line you’ve already written, and add “My name is .” Save and quit. Then, add the file and commit your changes. If you want to push these changes to your remote repository, simply type the following in the command line: git push You’ll see a similar message appear about enumerating, counting, and writing objects to GitHub. Afterwards, if you refresh your file on GitHub, you should see your changes: Note that your commit message appears here as well: If you click the commit tag: You’ll be taken to another page, which shows you the differences between your old version and the new one: "],["cloning-a-repository.html", "5 Cloning a Repository", " 5 Cloning a Repository "]]
